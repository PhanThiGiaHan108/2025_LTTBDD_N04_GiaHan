import 'tu_cua_ban.dart';
import 'cai_dat.dart';
import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'chi_tiet.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:shared_preferences/shared_preferences.dart';

class TrangChu extends StatefulWidget {
  const TrangChu({super.key});

  @override
  State<TrangChu> createState() => _TrangChuState();
}

class _TrangChuState extends State<TrangChu> {
  final FlutterTts tts = FlutterTts();
  int _selectedIndex = 0;
  Set<String> _favoriteWords = {}; // Store favorite word IDs (english names)
  String _searchQuery = ""; // Search query
  final TextEditingController _searchController = TextEditingController();

  // Settings
  bool _isDarkMode = false;
  double _fontSize = 1.0; // 0.8 = nh·ªè, 1.0 = v·ª´a, 1.2 = l·ªõn
  int _themeColorIndex = 0; // 0=deepPurple, 1=blue, 2=green, 3=orange, 4=pink

  @override
  void initState() {
    super.initState();
    _loadFavorites();
    _loadSettings();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  Future<void> _loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final favorites = prefs.getStringList('favorite_words') ?? [];
    setState(() {
      _favoriteWords = favorites.toSet();
    });
  }

  Future<void> _loadSettings() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _isDarkMode = prefs.getBool('dark_mode') ?? false;
      _fontSize = prefs.getDouble('font_size') ?? 1.0;
      _themeColorIndex = prefs.getInt('theme_color') ?? 0;
    });
  }

  Future<void> _saveSettings() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('dark_mode', _isDarkMode);
    await prefs.setDouble('font_size', _fontSize);
    await prefs.setInt('theme_color', _themeColorIndex);
  }

  Color _getThemeColor() {
    switch (_themeColorIndex) {
      case 0:
        return Colors.deepPurple;
      case 1:
        return Colors.blue;
      case 2:
        return Colors.green;
      case 3:
        return Colors.orange;
      case 4:
        return Colors.pink;
      default:
        return Colors.deepPurple;
    }
  }

  String _getThemeColorName() {
    switch (_themeColorIndex) {
      case 0:
        return "theme_purple".tr();
      case 1:
        return "theme_blue".tr();
      case 2:
        return "theme_green".tr();
      case 3:
        return "theme_orange".tr();
      case 4:
        return "theme_pink".tr();
      default:
        return "theme_purple".tr();
    }
  }

  Future<void> _saveFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList('favorite_words', _favoriteWords.toList());
  }

  void _toggleFavorite(String wordEnglish) {
    setState(() {
      if (_favoriteWords.contains(wordEnglish)) {
        _favoriteWords.remove(wordEnglish);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'removed_from_favorites'.tr(namedArgs: {"word": wordEnglish}),
            ),
            duration: const Duration(seconds: 1),
          ),
        );
      } else {
        _favoriteWords.add(wordEnglish);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'added_to_favorites'.tr(namedArgs: {"word": wordEnglish}),
            ),
            duration: const Duration(seconds: 1),
          ),
        );
      }
    });
    _saveFavorites();
  }

  bool _isFavorite(String wordEnglish) {
    return _favoriteWords.contains(wordEnglish);
  }

  List<Map<String, dynamic>> _getFilteredWords() {
    if (_searchQuery.isEmpty) {
      return _words;
    }

    final query = _searchQuery.toLowerCase();
    return _words.where((word) {
      final english = (word['english'] ?? '').toString().toLowerCase();
      final vietnamese = (word['vietnamese'] ?? '').toString().toLowerCase();
      final phonetic = (word['phonetic'] ?? '').toString().toLowerCase();

      return english.contains(query) ||
          vietnamese.contains(query) ||
          phonetic.contains(query);
    }).toList();
  }

  // üìò Danh s√°ch t·ª´ m·∫´u
  final List<Map<String, dynamic>> _words = [
    {
      "english": "Hello",
      "phonetic": "/h…ôÀàl…ô ä/",
      "type": "th√°n t·ª´",
      "vietnamese": "Xin ch√†o",
      "examples": [
        {"en": "Hello, how are you?", "vi": "Xin ch√†o, b·∫°n kh·ªèe kh√¥ng?"},
        {
          "en": "He said hello to everyone.",
          "vi": "Anh ·∫•y ch√†o t·∫•t c·∫£ m·ªçi ng∆∞·ªùi.",
        },
      ],
      "idioms": [
        {"en": "Say hello to somebody", "vi": "G·ª≠i l·ªùi ch√†o t·ªõi ai ƒë√≥"},
      ],
      "synonyms": ["Hi", "Hey", "Greetings"],
    },
    {
      "english": "Book",
      "phonetic": "/b äk/",
      "type": "danh t·ª´",
      "vietnamese": "Quy·ªÉn s√°ch",
      "examples": [
        {
          "en": "I borrowed a new book from the library.",
          "vi": "T√¥i m∆∞·ª£n m·ªôt quy·ªÉn s√°ch m·ªõi t·ª´ th∆∞ vi·ªán.",
        },
        {
          "en": "This book is very interesting.",
          "vi": "Quy·ªÉn s√°ch n√†y r·∫•t th√∫ v·ªã.",
        },
      ],
      "idioms": [
        {"en": "By the book", "vi": "Theo ƒë√∫ng quy tr√¨nh"},
      ],
      "synonyms": ["Volume", "Tome", "Publication"],
    },
    {
      "english": "Apple",
      "phonetic": "/Àà√¶pl/",
      "type": "danh t·ª´",
      "vietnamese": "Qu·∫£ t√°o",
      "examples": [
        {
          "en": "She ate an apple for breakfast.",
          "vi": "C√¥ ·∫•y ƒÉn m·ªôt qu·∫£ t√°o cho b·ªØa s√°ng.",
        },
      ],
      "idioms": [
        {"en": "The apple of one's eye", "vi": "Ng∆∞·ªùi y√™u qu√Ω nh·∫•t"},
      ],
      "synonyms": ["Pome", "Fruit"],
    },
    {
      "english": "Computer",
      "phonetic": "/k…ômÀàpjuÀêt…ô(r)/",
      "type": "danh t·ª´",
      "vietnamese": "M√°y t√≠nh",
      "examples": [
        {
          "en": "She works on her computer all day.",
          "vi": "C√¥ ·∫•y l√†m vi·ªác tr√™n m√°y t√≠nh su·ªët c·∫£ ng√†y.",
        },
      ],
      "idioms": [
        {"en": "Computer-savvy", "vi": "Th·∫°o m√°y t√≠nh"},
      ],
      "synonyms": ["PC", "Machine", "Processor"],
    },
    {
      "english": "Beautiful",
      "phonetic": "/ÀàbjuÀêt…™fl/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "ƒê·∫πp",
      "examples": [
        {"en": "She has beautiful eyes.", "vi": "C√¥ ·∫•y c√≥ ƒë√¥i m·∫Øt ƒë·∫πp."},
        {"en": "What a beautiful day!", "vi": "Th·∫≠t l√† m·ªôt ng√†y ƒë·∫πp tr·ªùi!"},
      ],
      "idioms": [
        {
          "en": "Beauty is in the eye of the beholder",
          "vi": "C√°i ƒë·∫πp l√† do ng∆∞·ªùi nh√¨n",
        },
      ],
      "synonyms": ["Pretty", "Gorgeous", "Lovely"],
    },
    {
      "english": "Happy",
      "phonetic": "/Ààh√¶pi/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "Vui v·∫ª, h·∫°nh ph√∫c",
      "examples": [
        {"en": "I'm so happy to see you!", "vi": "T√¥i r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n!"},
        {
          "en": "They lived happily ever after.",
          "vi": "H·ªç s·ªëng h·∫°nh ph√∫c m√£i m√£i.",
        },
      ],
      "idioms": [
        {"en": "Happy as a clam", "vi": "Vui nh∆∞ con chim"},
      ],
      "synonyms": ["Joyful", "Cheerful", "Delighted"],
    },
    {
      "english": "Water",
      "phonetic": "/Ààw…îÀêt…ô(r)/",
      "type": "danh t·ª´",
      "vietnamese": "N∆∞·ªõc",
      "examples": [
        {"en": "I need a glass of water.", "vi": "T√¥i c·∫ßn m·ªôt ly n∆∞·ªõc."},
        {
          "en": "Water is essential for life.",
          "vi": "N∆∞·ªõc l√† c·∫ßn thi·∫øt cho s·ª± s·ªëng.",
        },
      ],
      "idioms": [
        {"en": "Water under the bridge", "vi": "Chuy·ªán ƒë√£ qua r·ªìi"},
      ],
      "synonyms": ["H2O", "Liquid"],
    },
    {
      "english": "Friend",
      "phonetic": "/frend/",
      "type": "danh t·ª´",
      "vietnamese": "B·∫°n b√®",
      "examples": [
        {
          "en": "She is my best friend.",
          "vi": "C√¥ ·∫•y l√† b·∫°n th√¢n nh·∫•t c·ªßa t√¥i.",
        },
        {
          "en": "A friend in need is a friend indeed.",
          "vi": "B·∫°n gi√∫p l√∫c ho·∫°n n·∫°n m·ªõi l√† b·∫°n th·ª±c s·ª±.",
        },
      ],
      "idioms": [
        {"en": "Make friends with someone", "vi": "K·∫øt b·∫°n v·ªõi ai ƒë√≥"},
      ],
      "synonyms": ["Buddy", "Pal", "Companion"],
    },
    {
      "english": "House",
      "phonetic": "/ha äs/",
      "type": "danh t·ª´",
      "vietnamese": "Ng√¥i nh√†",
      "examples": [
        {"en": "They bought a new house.", "vi": "H·ªç ƒë√£ mua m·ªôt ng√¥i nh√† m·ªõi."},
        {"en": "Welcome to my house!", "vi": "Ch√†o m·ª´ng ƒë·∫øn nh√† t√¥i!"},
      ],
      "idioms": [
        {"en": "Feel at home", "vi": "C·∫£m th·∫•y tho·∫£i m√°i nh∆∞ ·ªü nh√†"},
      ],
      "synonyms": ["Home", "Residence", "Dwelling"],
    },
    {
      "english": "Love",
      "phonetic": "/l åv/",
      "type": "danh t·ª´",
      "vietnamese": "T√¨nh y√™u",
      "examples": [
        {
          "en": "Love makes the world go round.",
          "vi": "T√¨nh y√™u l√†m cho th·∫ø gi·ªõi quay tr√≤n.",
        },
        {"en": "I love you.", "vi": "Anh y√™u em."},
      ],
      "idioms": [
        {"en": "Love at first sight", "vi": "T√¨nh y√™u s√©t ƒë√°nh"},
      ],
      "synonyms": ["Affection", "Adoration", "Devotion"],
    },
    {
      "english": "Study",
      "phonetic": "/Ààst ådi/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "H·ªçc, nghi√™n c·ª©u",
      "examples": [
        {
          "en": "I study English every day.",
          "vi": "T√¥i h·ªçc ti·∫øng Anh m·ªói ng√†y.",
        },
        {"en": "She studies at university.", "vi": "C√¥ ·∫•y h·ªçc ·ªü ƒë·∫°i h·ªçc."},
      ],
      "idioms": [
        {"en": "Hit the books", "vi": "ChƒÉm ch·ªâ h·ªçc h√†nh"},
      ],
      "synonyms": ["Learn", "Research", "Examine"],
    },
    {
      "english": "Food",
      "phonetic": "/fuÀêd/",
      "type": "danh t·ª´",
      "vietnamese": "Th·ª©c ƒÉn",
      "examples": [
        {"en": "The food here is delicious.", "vi": "ƒê·ªì ƒÉn ·ªü ƒë√¢y r·∫•t ngon."},
        {
          "en": "We need to buy some food.",
          "vi": "Ch√∫ng ta c·∫ßn mua m·ªôt √≠t th·ª©c ƒÉn.",
        },
      ],
      "idioms": [
        {"en": "Food for thought", "vi": "ƒêi·ªÅu ƒë√°ng suy ng·∫´m"},
      ],
      "synonyms": ["Meal", "Cuisine", "Dish"],
    },
    {
      "english": "Work",
      "phonetic": "/w…úÀêk/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "L√†m vi·ªác",
      "examples": [
        {"en": "I work at a hospital.", "vi": "T√¥i l√†m vi·ªác ·ªü b·ªánh vi·ªán."},
        {
          "en": "Hard work pays off.",
          "vi": "L√†m vi·ªác chƒÉm ch·ªâ s·∫Ω ƒë∆∞·ª£c ƒë·ªÅn ƒë√°p.",
        },
      ],
      "idioms": [
        {"en": "Work like a charm", "vi": "Hi·ªáu qu·∫£ tuy·ªát v·ªùi"},
      ],
      "synonyms": ["Labor", "Employment", "Job"],
    },
    {
      "english": "School",
      "phonetic": "/skuÀêl/",
      "type": "danh t·ª´",
      "vietnamese": "Tr∆∞·ªùng h·ªçc",
      "examples": [
        {"en": "My children go to school.", "vi": "Con t√¥i ƒëi h·ªçc."},
        {
          "en": "School starts at 8 AM.",
          "vi": "Tr∆∞·ªùng h·ªçc b·∫Øt ƒë·∫ßu l√∫c 8 gi·ªù s√°ng.",
        },
      ],
      "idioms": [
        {"en": "Old school", "vi": "L·ªëi c≈©, truy·ªÅn th·ªëng"},
      ],
      "synonyms": ["Academy", "Institution", "College"],
    },
    {
      "english": "Time",
      "phonetic": "/ta…™m/",
      "type": "danh t·ª´",
      "vietnamese": "Th·ªùi gian",
      "examples": [
        {
          "en": "Time flies when you're having fun.",
          "vi": "Th·ªùi gian tr√¥i nhanh khi b·∫°n vui v·∫ª.",
        },
        {"en": "What time is it?", "vi": "M·∫•y gi·ªù r·ªìi?"},
      ],
      "idioms": [
        {"en": "Time is money", "vi": "Th·ªùi gian l√† v√†ng b·∫°c"},
      ],
      "synonyms": ["Period", "Moment", "Duration"],
    },
    {
      "english": "Cat",
      "phonetic": "/k√¶t/",
      "type": "danh t·ª´",
      "vietnamese": "Con m√®o",
      "examples": [
        {"en": "My cat is sleeping.", "vi": "Con m√®o c·ªßa t√¥i ƒëang ng·ªß."},
        {"en": "Cats are very independent.", "vi": "M√®o r·∫•t ƒë·ªôc l·∫≠p."},
      ],
      "idioms": [
        {"en": "Let the cat out of the bag", "vi": "V√¥ t√¨nh ti·∫øt l·ªô b√≠ m·∫≠t"},
      ],
      "synonyms": ["Feline", "Kitty"],
    },
    {
      "english": "Dog",
      "phonetic": "/d…í…°/",
      "type": "danh t·ª´",
      "vietnamese": "Con ch√≥",
      "examples": [
        {"en": "Dogs are loyal animals.", "vi": "Ch√≥ l√† ƒë·ªông v·∫≠t trung th√†nh."},
        {
          "en": "I walk my dog every morning.",
          "vi": "T√¥i d·∫Øt ch√≥ ƒëi d·∫°o m·ªói s√°ng.",
        },
      ],
      "idioms": [
        {"en": "Every dog has its day", "vi": "Ai c≈©ng c√≥ l√∫c th√†nh c√¥ng"},
      ],
      "synonyms": ["Canine", "Puppy", "Hound"],
    },
    {
      "english": "Money",
      "phonetic": "/Ààm åni/",
      "type": "danh t·ª´",
      "vietnamese": "Ti·ªÅn",
      "examples": [
        {
          "en": "Money can't buy happiness.",
          "vi": "Ti·ªÅn kh√¥ng mua ƒë∆∞·ª£c h·∫°nh ph√∫c.",
        },
        {"en": "I need to save money.", "vi": "T√¥i c·∫ßn ti·∫øt ki·ªám ti·ªÅn."},
      ],
      "idioms": [
        {"en": "Money talks", "vi": "C√≥ ti·ªÅn mua ti√™n c≈©ng ƒë∆∞·ª£c"},
      ],
      "synonyms": ["Cash", "Currency", "Funds"],
    },
    {
      "english": "Family",
      "phonetic": "/Ààf√¶m…ôli/",
      "type": "danh t·ª´",
      "vietnamese": "Gia ƒë√¨nh",
      "examples": [
        {"en": "Family is everything.", "vi": "Gia ƒë√¨nh l√† t·∫•t c·∫£."},
        {
          "en": "I spend time with my family on weekends.",
          "vi": "T√¥i d√†nh th·ªùi gian cho gia ƒë√¨nh v√†o cu·ªëi tu·∫ßn.",
        },
      ],
      "idioms": [
        {
          "en": "Blood is thicker than water",
          "vi": "M·ªôt gi·ªçt m√°u ƒë√†o h∆°n ao n∆∞·ªõc l√£",
        },
      ],
      "synonyms": ["Relatives", "Kin", "Household"],
    },
    {
      "english": "Car",
      "phonetic": "/k…ëÀê(r)/",
      "type": "danh t·ª´",
      "vietnamese": "√î t√¥, xe h∆°i",
      "examples": [
        {"en": "I bought a new car.", "vi": "T√¥i ƒë√£ mua m·ªôt chi·∫øc xe m·ªõi."},
        {"en": "She drives her car to work.", "vi": "C√¥ ·∫•y l√°i xe ƒëi l√†m."},
      ],
      "idioms": [
        {"en": "In the driver's seat", "vi": "N·∫Øm quy·ªÅn ki·ªÉm so√°t"},
      ],
      "synonyms": ["Vehicle", "Automobile", "Auto"],
    },
    {
      "english": "Phone",
      "phonetic": "/f…ô än/",
      "type": "danh t·ª´",
      "vietnamese": "ƒêi·ªán tho·∫°i",
      "examples": [
        {"en": "My phone is ringing.", "vi": "ƒêi·ªán tho·∫°i c·ªßa t√¥i ƒëang reo."},
        {
          "en": "Can I use your phone?",
          "vi": "T√¥i c√≥ th·ªÉ d√πng ƒëi·ªán tho·∫°i c·ªßa b·∫°n ƒë∆∞·ª£c kh√¥ng?",
        },
      ],
      "idioms": [
        {"en": "On the phone", "vi": "ƒêang n√≥i chuy·ªán ƒëi·ªán tho·∫°i"},
      ],
      "synonyms": ["Telephone", "Mobile", "Cellphone"],
    },
    {
      "english": "Good",
      "phonetic": "/…° äd/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "T·ªët",
      "examples": [
        {"en": "That's a good idea!", "vi": "ƒê√≥ l√† m·ªôt √Ω t∆∞·ªüng hay!"},
        {"en": "She is a good person.", "vi": "C√¥ ·∫•y l√† ng∆∞·ªùi t·ªët."},
      ],
      "idioms": [
        {"en": "Good as gold", "vi": "Ngoan ngo√£n, t·ªët b·ª•ng"},
      ],
      "synonyms": ["Great", "Excellent", "Fine"],
    },
    {
      "english": "Bad",
      "phonetic": "/b√¶d/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "X·∫•u, t·ªìi",
      "examples": [
        {"en": "The weather is bad today.", "vi": "Th·ªùi ti·∫øt h√¥m nay x·∫•u."},
        {"en": "That was a bad decision.", "vi": "ƒê√≥ l√† m·ªôt quy·∫øt ƒë·ªãnh t·ªìi."},
      ],
      "idioms": [
        {"en": "Not bad", "vi": "Kh√¥ng t·ªá"},
      ],
      "synonyms": ["Poor", "Terrible", "Awful"],
    },
    {
      "english": "Big",
      "phonetic": "/b…™…°/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "To, l·ªõn",
      "examples": [
        {"en": "This is a big house.", "vi": "ƒê√¢y l√† m·ªôt ng√¥i nh√† l·ªõn."},
        {"en": "He has a big dream.", "vi": "Anh ·∫•y c√≥ m·ªôt gi·∫•c m∆° l·ªõn."},
      ],
      "idioms": [
        {"en": "Big fish in a small pond", "vi": "·∫æch ng·ªìi ƒë√°y gi·∫øng"},
      ],
      "synonyms": ["Large", "Huge", "Enormous"],
    },
    {
      "english": "Small",
      "phonetic": "/sm…îÀêl/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "Nh·ªè, b√©",
      "examples": [
        {"en": "She has a small dog.", "vi": "C√¥ ·∫•y c√≥ m·ªôt con ch√≥ nh·ªè."},
        {"en": "This shirt is too small.", "vi": "Chi·∫øc √°o n√†y qu√° nh·ªè."},
      ],
      "idioms": [
        {"en": "Small talk", "vi": "N√≥i chuy·ªán phi·∫øm"},
      ],
      "synonyms": ["Little", "Tiny", "Petite"],
    },
    {
      "english": "Hot",
      "phonetic": "/h…ít/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "N√≥ng",
      "examples": [
        {"en": "It's very hot today.", "vi": "H√¥m nay r·∫•t n√≥ng."},
        {"en": "The coffee is too hot.", "vi": "C√† ph√™ qu√° n√≥ng."},
      ],
      "idioms": [
        {"en": "Hot potato", "vi": "V·∫•n ƒë·ªÅ n√≥ng h·ªïi"},
      ],
      "synonyms": ["Warm", "Heated", "Boiling"],
    },
    {
      "english": "Cold",
      "phonetic": "/k…ô äld/",
      "type": "t√≠nh t·ª´",
      "vietnamese": "L·∫°nh",
      "examples": [
        {"en": "The water is cold.", "vi": "N∆∞·ªõc l·∫°nh."},
        {"en": "I caught a cold.", "vi": "T√¥i b·ªã c·∫£m l·∫°nh."},
      ],
      "idioms": [
        {"en": "Cold feet", "vi": "S·ª£ h√£i, ch√πn b∆∞·ªõc"},
      ],
      "synonyms": ["Cool", "Chilly", "Freezing"],
    },
    {
      "english": "Run",
      "phonetic": "/r ån/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Ch·∫°y",
      "examples": [
        {"en": "I run every morning.", "vi": "T√¥i ch·∫°y b·ªô m·ªói s√°ng."},
        {"en": "He runs very fast.", "vi": "Anh ·∫•y ch·∫°y r·∫•t nhanh."},
      ],
      "idioms": [
        {"en": "Run out of time", "vi": "H·∫øt th·ªùi gian"},
      ],
      "synonyms": ["Jog", "Sprint", "Dash"],
    },
    {
      "english": "Walk",
      "phonetic": "/w…îÀêk/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "ƒêi b·ªô",
      "examples": [
        {
          "en": "Let's walk to the park.",
          "vi": "Ch√∫ng ta h√£y ƒëi b·ªô ƒë·∫øn c√¥ng vi√™n.",
        },
        {"en": "She walks to school.", "vi": "C√¥ ·∫•y ƒëi b·ªô ƒë·∫øn tr∆∞·ªùng."},
      ],
      "idioms": [
        {"en": "Walk in the park", "vi": "Chuy·ªán d·ªÖ nh∆∞ ƒÉn k·∫πo"},
      ],
      "synonyms": ["Stroll", "March", "Hike"],
    },
    {
      "english": "Talk",
      "phonetic": "/t…îÀêk/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "N√≥i chuy·ªán",
      "examples": [
        {"en": "We need to talk.", "vi": "Ch√∫ng ta c·∫ßn n√≥i chuy·ªán."},
        {"en": "She talks a lot.", "vi": "C√¥ ·∫•y n√≥i nhi·ªÅu."},
      ],
      "idioms": [
        {"en": "Talk the talk", "vi": "N√≥i c√≥ s√°ch, m√°ch c√≥ ch·ª©ng"},
      ],
      "synonyms": ["Speak", "Chat", "Converse"],
    },
    {
      "english": "Write",
      "phonetic": "/ra…™t/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Vi·∫øt",
      "examples": [
        {
          "en": "I write in my diary every day.",
          "vi": "T√¥i vi·∫øt nh·∫≠t k√Ω m·ªói ng√†y.",
        },
        {
          "en": "She writes beautiful poems.",
          "vi": "C√¥ ·∫•y vi·∫øt nh·ªØng b√†i th∆° ƒë·∫πp.",
        },
      ],
      "idioms": [
        {"en": "Write off", "vi": "G·∫°ch b·ªè, t·ª´ b·ªè"},
      ],
      "synonyms": ["Compose", "Author", "Pen"],
    },
    {
      "english": "Read",
      "phonetic": "/riÀêd/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "ƒê·ªçc",
      "examples": [
        {"en": "I love to read books.", "vi": "T√¥i th√≠ch ƒë·ªçc s√°ch."},
        {"en": "Can you read this?", "vi": "B·∫°n c√≥ th·ªÉ ƒë·ªçc c√°i n√†y kh√¥ng?"},
      ],
      "idioms": [
        {"en": "Read between the lines", "vi": "Hi·ªÉu √Ω nghƒ©a ·∫©n d·ª•"},
      ],
      "synonyms": ["Peruse", "Study", "Browse"],
    },
    {
      "english": "Eat",
      "phonetic": "/iÀêt/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "ƒÇn",
      "examples": [
        {
          "en": "Let's eat dinner together.",
          "vi": "Ch√∫ng ta h√£y ƒÉn t·ªëi c√πng nhau.",
        },
        {"en": "I eat breakfast at 7 AM.", "vi": "T√¥i ƒÉn s√°ng l√∫c 7 gi·ªù."},
      ],
      "idioms": [
        {"en": "Eat your words", "vi": "R√∫t l·∫°i l·ªùi n√≥i"},
      ],
      "synonyms": ["Consume", "Dine", "Feed"],
    },
    {
      "english": "Drink",
      "phonetic": "/dr…™≈ãk/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "U·ªëng",
      "examples": [
        {
          "en": "I drink coffee every morning.",
          "vi": "T√¥i u·ªëng c√† ph√™ m·ªói s√°ng.",
        },
        {
          "en": "Would you like something to drink?",
          "vi": "B·∫°n mu·ªën u·ªëng g√¨ kh√¥ng?",
        },
      ],
      "idioms": [
        {"en": "Drink like a fish", "vi": "U·ªëng r∆∞·ª£u nh∆∞ t√°t n∆∞·ªõc"},
      ],
      "synonyms": ["Sip", "Gulp", "Consume"],
    },
    {
      "english": "Sleep",
      "phonetic": "/sliÀêp/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Ng·ªß",
      "examples": [
        {
          "en": "I need to sleep early tonight.",
          "vi": "T√¥i c·∫ßn ng·ªß s·ªõm t·ªëi nay.",
        },
        {"en": "The baby is sleeping.", "vi": "Em b√© ƒëang ng·ªß."},
      ],
      "idioms": [
        {"en": "Sleep on it", "vi": "Suy nghƒ© k·ªπ tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh"},
      ],
      "synonyms": ["Slumber", "Rest", "Doze"],
    },
    {
      "english": "Play",
      "phonetic": "/ple…™/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Ch∆°i",
      "examples": [
        {"en": "Children love to play.", "vi": "Tr·∫ª em th√≠ch ch∆°i."},
        {
          "en": "I play soccer on weekends.",
          "vi": "T√¥i ch∆°i b√≥ng ƒë√° v√†o cu·ªëi tu·∫ßn.",
        },
      ],
      "idioms": [
        {"en": "Play it by ear", "vi": "T√πy c∆° ·ª©ng bi·∫øn"},
      ],
      "synonyms": ["Engage", "Participate", "Enjoy"],
    },
    {
      "english": "Learn",
      "phonetic": "/l…úÀên/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "H·ªçc h·ªèi",
      "examples": [
        {"en": "I want to learn English.", "vi": "T√¥i mu·ªën h·ªçc ti·∫øng Anh."},
        {
          "en": "We learn something new every day.",
          "vi": "Ch√∫ng ta h·ªçc ƒë∆∞·ª£c ƒëi·ªÅu m·ªõi m·ªói ng√†y.",
        },
      ],
      "idioms": [
        {"en": "Learn the ropes", "vi": "H·ªçc h·ªèi kinh nghi·ªám"},
      ],
      "synonyms": ["Study", "Master", "Acquire"],
    },
    {
      "english": "Teach",
      "phonetic": "/tiÀêt É/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "D·∫°y",
      "examples": [
        {"en": "She teaches English.", "vi": "C√¥ ·∫•y d·∫°y ti·∫øng Anh."},
        {
          "en": "Can you teach me how to swim?",
          "vi": "B·∫°n c√≥ th·ªÉ d·∫°y t√¥i b∆°i kh√¥ng?",
        },
      ],
      "idioms": [
        {
          "en": "Teach an old dog new tricks",
          "vi": "Kh√≥ d·∫°y ng∆∞·ªùi gi√† thay ƒë·ªïi",
        },
      ],
      "synonyms": ["Instruct", "Educate", "Train"],
    },
    {
      "english": "Help",
      "phonetic": "/help/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Gi√∫p ƒë·ª°",
      "examples": [
        {"en": "Can you help me?", "vi": "B·∫°n c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng?"},
        {"en": "I always help my friends.", "vi": "T√¥i lu√¥n gi√∫p ƒë·ª° b·∫°n b√®."},
      ],
      "idioms": [
        {"en": "Help yourself", "vi": "T·ª± nhi√™n nh∆∞ ·ªü nh√†"},
      ],
      "synonyms": ["Assist", "Aid", "Support"],
    },
    {
      "english": "Think",
      "phonetic": "/Œ∏…™≈ãk/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Suy nghƒ©",
      "examples": [
        {"en": "I think you're right.", "vi": "T√¥i nghƒ© b·∫°n ƒë√∫ng."},
        {"en": "Let me think about it.", "vi": "ƒê·ªÉ t√¥i suy nghƒ© v·ªÅ ƒëi·ªÅu ƒë√≥."},
      ],
      "idioms": [
        {"en": "Think outside the box", "vi": "Suy nghƒ© s√°ng t·∫°o"},
      ],
      "synonyms": ["Consider", "Ponder", "Reflect"],
    },
    {
      "english": "Know",
      "phonetic": "/n…ô ä/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Bi·∫øt",
      "examples": [
        {"en": "I know the answer.", "vi": "T√¥i bi·∫øt c√¢u tr·∫£ l·ªùi."},
        {"en": "Do you know her?", "vi": "B·∫°n c√≥ bi·∫øt c√¥ ·∫•y kh√¥ng?"},
      ],
      "idioms": [
        {"en": "Know the ropes", "vi": "Bi·∫øt r√µ c√¥ng vi·ªác"},
      ],
      "synonyms": ["Understand", "Recognize", "Realize"],
    },
    {
      "english": "Want",
      "phonetic": "/w…ínt/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Mu·ªën",
      "examples": [
        {"en": "What do you want?", "vi": "B·∫°n mu·ªën g√¨?"},
        {"en": "I want to go home.", "vi": "T√¥i mu·ªën v·ªÅ nh√†."},
      ],
      "idioms": [
        {"en": "Want for nothing", "vi": "Kh√¥ng thi·∫øu th·ª© g√¨"},
      ],
      "synonyms": ["Desire", "Wish", "Need"],
    },
    {
      "english": "Give",
      "phonetic": "/…°…™v/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Cho, t·∫∑ng",
      "examples": [
        {"en": "Give me your hand.", "vi": "ƒê∆∞a tay cho t√¥i."},
        {"en": "She gave me a gift.", "vi": "C√¥ ·∫•y t·∫∑ng t√¥i m·ªôt m√≥n qu√†."},
      ],
      "idioms": [
        {"en": "Give it a shot", "vi": "Th·ª≠ xem sao"},
      ],
      "synonyms": ["Provide", "Offer", "Present"],
    },
    {
      "english": "Take",
      "phonetic": "/te…™k/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "L·∫•y, nh·∫≠n",
      "examples": [
        {"en": "Take this book.", "vi": "L·∫•y quy·ªÉn s√°ch n√†y."},
        {"en": "It takes time.", "vi": "ƒêi·ªÅu ƒë√≥ c·∫ßn th·ªùi gian."},
      ],
      "idioms": [
        {"en": "Take it easy", "vi": "B√¨nh tƒ©nh, th∆∞ gi√£n"},
      ],
      "synonyms": ["Accept", "Grab", "Receive"],
    },
    {
      "english": "Make",
      "phonetic": "/me…™k/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "L√†m, t·∫°o ra",
      "examples": [
        {"en": "I made a mistake.", "vi": "T√¥i ƒë√£ ph·∫°m sai l·∫ßm."},
        {
          "en": "She makes beautiful cakes.",
          "vi": "C√¥ ·∫•y l√†m nh·ªØng chi·∫øc b√°nh ƒë·∫πp.",
        },
      ],
      "idioms": [
        {"en": "Make up your mind", "vi": "Quy·∫øt ƒë·ªãnh ƒëi"},
      ],
      "synonyms": ["Create", "Build", "Produce"],
    },
    {
      "english": "Come",
      "phonetic": "/k åm/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "ƒê·∫øn",
      "examples": [
        {"en": "Come here!", "vi": "ƒê·∫øn ƒë√¢y!"},
        {"en": "Winter is coming.", "vi": "M√πa ƒë√¥ng ƒëang ƒë·∫øn."},
      ],
      "idioms": [
        {"en": "Come what may", "vi": "D√π c√≥ chuy·ªán g√¨ x·∫£y ra"},
      ],
      "synonyms": ["Arrive", "Approach", "Reach"],
    },
    {
      "english": "Go",
      "phonetic": "/…°…ô ä/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "ƒêi",
      "examples": [
        {"en": "Let's go!", "vi": "ƒêi th√¥i!"},
        {"en": "Where are you going?", "vi": "B·∫°n ƒëang ƒëi ƒë√¢u?"},
      ],
      "idioms": [
        {"en": "Go the extra mile", "vi": "C·ªë g·∫Øng h·∫øt m√¨nh"},
      ],
      "synonyms": ["Leave", "Depart", "Travel"],
    },
    {
      "english": "See",
      "phonetic": "/siÀê/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Nh√¨n, th·∫•y",
      "examples": [
        {"en": "I can see you.", "vi": "T√¥i c√≥ th·ªÉ th·∫•y b·∫°n."},
        {"en": "See you later!", "vi": "H·∫πn g·∫∑p l·∫°i!"},
      ],
      "idioms": [
        {"en": "See eye to eye", "vi": "ƒê·ªìng √Ω v·ªõi nhau"},
      ],
      "synonyms": ["Watch", "View", "Observe"],
    },
    {
      "english": "Look",
      "phonetic": "/l äk/",
      "type": "ƒë·ªông t·ª´",
      "vietnamese": "Nh√¨n",
      "examples": [
        {"en": "Look at this!", "vi": "Nh√¨n c√°i n√†y!"},
        {"en": "You look beautiful.", "vi": "B·∫°n tr√¥ng ƒë·∫πp."},
      ],
      "idioms": [
        {"en": "Look on the bright side", "vi": "Nh√¨n v√†o m·∫∑t t√≠ch c·ª±c"},
      ],
      "synonyms": ["Gaze", "Glance", "Stare"],
    },
  ];

  Future<void> _speak(String text) async {
    await tts.setLanguage("en-US");
    await tts.setPitch(1.0);
    await tts.speak(text);
  }

  void _onTabTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    // L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ responsive
    final size = MediaQuery.of(context).size;
    final themeColor = _getThemeColor();
    final bgColor = _isDarkMode
        ? const Color(0xFF1E1E1E)
        : const Color(0xFFFFFDE7);
    final cardColor = _isDarkMode ? const Color(0xFF2D2D2D) : Colors.white;
    final textColor = _isDarkMode ? Colors.white : Colors.black87;

    return Scaffold(
      backgroundColor: bgColor,
      body: SafeArea(child: _buildBody(size, themeColor, cardColor, textColor)),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onTabTapped,
        selectedItemColor: themeColor,
        unselectedItemColor: Colors.grey,
        backgroundColor: _isDarkMode ? const Color(0xFF2D2D2D) : Colors.white,
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: "home".tr()),
          BottomNavigationBarItem(
            icon: Icon(Icons.star),
            label: "favorites".tr(),
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: "settings".tr(),
          ),
        ],
      ),
    );
  }

  Widget _buildBody(
    Size size,
    Color themeColor,
    Color cardColor,
    Color textColor,
  ) {
    // üìÑ Trang ch·ªß
    if (_selectedIndex == 0) {
      return Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          children: [
            // üîç Thanh t√¨m ki·∫øm
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(25),
                boxShadow: [
                  BoxShadow(
                    color: const Color.fromARGB(255, 11, 2, 2).withOpacity(0.2),
                    blurRadius: 6,
                    offset: const Offset(2, 4),
                  ),
                ],
              ),
              child: TextField(
                controller: _searchController,
                onChanged: (value) {
                  setState(() {
                    _searchQuery = value;
                  });
                },
                decoration: InputDecoration(
                  hintText: "search".tr(),
                  hintStyle: const TextStyle(color: Colors.grey),
                  prefixIcon: const Icon(
                    Icons.search,
                    color: Colors.deepPurple,
                  ),
                  suffixIcon: _searchQuery.isNotEmpty
                      ? IconButton(
                          icon: const Icon(Icons.clear, color: Colors.grey),
                          onPressed: () {
                            setState(() {
                              _searchController.clear();
                              _searchQuery = "";
                            });
                          },
                        )
                      : null,
                  border: InputBorder.none,
                ),
              ),
            ),
            const SizedBox(height: 15),

            // üìö Danh s√°ch t·ª´
            Expanded(
              child: Container(
                decoration: const BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFFFFF8E1), Color(0xFFFFFDE7)],
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                  ),
                ),
                child: Builder(
                  builder: (context) {
                    final filteredWords = _getFilteredWords();

                    if (filteredWords.isEmpty) {
                      return Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            const Icon(
                              Icons.search_off,
                              size: 80,
                              color: Colors.grey,
                            ),
                            const SizedBox(height: 20),
                            Text(
                              "no_results".tr(),
                              style: const TextStyle(
                                fontSize: 18,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      );
                    }

                    return ListView.builder(
                      itemCount: filteredWords.length,
                      itemBuilder: (context, index) {
                        final word = filteredWords[index];
                        return Dismissible(
                          key: Key(word["english"]!),
                          direction: DismissDirection.endToStart,
                          background: Container(
                            alignment: Alignment.centerRight,
                            padding: const EdgeInsets.only(right: 20),
                            margin: const EdgeInsets.symmetric(
                              vertical: 8,
                              horizontal: 4,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.red,
                              borderRadius: BorderRadius.circular(15),
                            ),
                            child: const Icon(
                              Icons.delete,
                              color: Colors.white,
                              size: 30,
                            ),
                          ),
                          confirmDismiss: (direction) async {
                            return await showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return AlertDialog(
                                  title: Text("confirm_delete".tr()),
                                  content: Text(
                                    "confirm_delete_message".tr(
                                      namedArgs: {"word": word["english"]!},
                                    ),
                                  ),
                                  actions: [
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.of(context).pop(false),
                                      child: Text("cancel".tr()),
                                    ),
                                    TextButton(
                                      onPressed: () =>
                                          Navigator.of(context).pop(true),
                                      child: Text(
                                        "delete".tr(),
                                        style: const TextStyle(
                                          color: Colors.red,
                                        ),
                                      ),
                                    ),
                                  ],
                                );
                              },
                            );
                          },
                          onDismissed: (direction) {
                            setState(() {
                              _words.removeWhere(
                                (w) => w["english"] == word["english"],
                              );
                              _favoriteWords.remove(word["english"]);
                            });
                            _saveFavorites();
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text(
                                  "word_deleted".tr(
                                    namedArgs: {"word": word["english"]!},
                                  ),
                                ),
                                action: SnackBarAction(
                                  label: "undo".tr(),
                                  onPressed: () {
                                    setState(() {
                                      _words.insert(index, word);
                                    });
                                  },
                                ),
                              ),
                            );
                          },
                          child: Card(
                            color: Colors.white,
                            elevation: 3,
                            margin: const EdgeInsets.symmetric(
                              vertical: 8,
                              horizontal: 4,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(15),
                            ),
                            child: ListTile(
                              onTap: () {
                                // show a short confirmation then navigate to details
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('opening_details'.tr()),
                                  ),
                                );
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (_) => ChiTiet(word: word),
                                  ),
                                );
                              },
                              title: Text(
                                word["english"] ?? "",
                                style: const TextStyle(
                                  color: Colors.redAccent,
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              subtitle: Padding(
                                padding: const EdgeInsets.only(top: 4),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      "${'phonetic_label'.tr()} ${word['phonetic']}",
                                      style: const TextStyle(fontSize: 14),
                                    ),
                                    const SizedBox(height: 4),
                                    Container(
                                      padding: const EdgeInsets.symmetric(
                                        horizontal: 8,
                                        vertical: 2,
                                      ),
                                      decoration: BoxDecoration(
                                        color: Colors.lightGreen,
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                      child: Text(
                                        word["type"] ?? "",
                                        style: const TextStyle(fontSize: 12),
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      word["vietnamese"] ?? "",
                                      style: const TextStyle(
                                        color: Colors.black87,
                                        fontSize: 15,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              trailing: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: Icon(
                                      _isFavorite(word["english"]!)
                                          ? Icons.star
                                          : Icons.star_border,
                                      color: Colors.orange,
                                    ),
                                    onPressed: () {
                                      _toggleFavorite(word["english"]!);
                                    },
                                  ),
                                  IconButton(
                                    icon: const Icon(
                                      Icons.volume_up,
                                      color: Colors.deepPurple,
                                    ),
                                    onPressed: () => _speak(word["english"]!),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        );
                      },
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      );
    }
    // ‚≠ê Trang "T·ª´ c·ªßa b·∫°n"
    else if (_selectedIndex == 1) {
      final favoriteWordsList = _words
          .where((word) => _favoriteWords.contains(word["english"]))
          .toList();
      return FavoritesTab(
        favoriteWordsList: favoriteWordsList,
        onSpeak: _speak,
        onToggleFavorite: _toggleFavorite,
      );
    }
    // ‚öôÔ∏è Trang "C√†i ƒë·∫∑t"
    else {
      return SettingsTab(
        isDarkMode: _isDarkMode,
        fontSize: _fontSize,
        themeColor: _getThemeColor(),
        onDarkModeChanged: (value) {
          setState(() {
            _isDarkMode = value;
          });
          _saveSettings();
        },
        onFontSizeChanged: (value) {
          setState(() {
            _fontSize = value;
          });
          _saveSettings();
        },
        onThemeColorChanged: (color) {
          setState(() {
            final colorList = [
              Colors.deepPurple,
              Colors.blue,
              Colors.green,
              Colors.orange,
              Colors.pink,
            ];
            _themeColorIndex = colorList.indexWhere(
              (c) => c.value == color.value,
            );
          });
          _saveSettings();
        },
        onLocaleChanged: (locale) {
          context.setLocale(locale);
        },
        currentLocale: context.locale,
      );
    }
  }

  Widget _buildSettingsCard({
    required Color cardColor,
    required Color textColor,
    required Color themeColor,
    required Widget child,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: cardColor,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: child,
    );
  }

  Widget _buildFontSizeButton(
    String label,
    double size,
    Color themeColor,
    Color textColor,
  ) {
    final isSelected = _fontSize == size;
    return ElevatedButton(
      onPressed: () {
        setState(() {
          _fontSize = size;
        });
        _saveSettings();
      },
      style: ElevatedButton.styleFrom(
        backgroundColor: isSelected ? themeColor : Colors.grey[300],
        foregroundColor: isSelected ? Colors.white : textColor,
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      ),
      child: Text(label),
    );
  }

  Widget _buildColorButton(int index, Color color, Color textColor) {
    final isSelected = _themeColorIndex == index;
    return GestureDetector(
      onTap: () {
        setState(() {
          _themeColorIndex = index;
        });
        _saveSettings();
      },
      child: Container(
        width: 50,
        height: 50,
        decoration: BoxDecoration(
          color: color,
          shape: BoxShape.circle,
          border: Border.all(
            color: isSelected ? Colors.white : Colors.transparent,
            width: 3,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: isSelected
            ? const Icon(Icons.check, color: Colors.white, size: 30)
            : null,
      ),
    );
  }
}
